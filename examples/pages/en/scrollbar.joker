<template>
    <div ref="container" class="joker-demo-container">
        <h2>Scrollbar</h2>
        <p>Used as a replacement for native browser scrollbars.</p>
        <h3>Basic Usage</h3>
        <p>
            Define the scrollbar height by setting the
            <code>height</code>
            property. If not set, it will adapt based on the parent container's height.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div style=&quot;height:200px&quot;&gt;
        &lt;jk-scrollbar&gt;
            @for(let i = 0; i &lt; 20; i++) {
                &lt;p class=&quot;scrollbar-demo-item&quot;&gt;
                    @i
                &lt;/p&gt;
            }
        &lt;/jk-scrollbar&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;style lang=&quot;scss&quot; scoped&gt;
.scrollbar-demo-item {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 50px;
    margin: 10px;
    text-align: center;
    border-radius: 4px;
    background: #ecf5ff;
    color: #409eff;
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Horizontal Scrolling</h3>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div&gt;
        &lt;jk-scrollbar&gt;
            &lt;div class=&quot;scrollbar-flex-content&quot;&gt;
                @for(let i = 0; i &lt; 20; i++) {
                    &lt;p class=&quot;scrollbar-demo-item&quot;&gt;
                        @i
                    &lt;/p&gt;
                }
            &lt;/div&gt;
        &lt;/jk-scrollbar&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;style lang=&quot;scss&quot; scoped&gt;
.scrollbar-flex-content {
    display: flex;
    .scrollbar-demo-item {
        flex-shrink: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100px;
        height: 50px;
        margin: 10px;
        text-align: center;
        background: #ecf5ff;
        color: #409eff;
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Setting Maximum Size</h3>
        <p>
            Control when the scrollbar triggers by setting boundary values on the parent container, such as
            <code>max-width</code>
            and
            <code>max-height</code>
            .
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-button @click=&quot;addRow&quot;&gt;Add a row&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;removeRow&quot;&gt;Remove a row&lt;/jk-button&gt;
    &lt;/DemoRow&gt;
    &lt;jk-scrollbar maxHeight=&quot;200px&quot;&gt;
        @for(let i = 0; i &lt; model.value; i++) {
            &lt;p class=&quot;scrollbar-demo-item&quot;&gt;
                @i
            &lt;/p&gt;
        }
    &lt;/jk-scrollbar&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        value: 3
    };

    addRow() {
        this.model.value++;
    }

    removeRow() {
        this.model.value--;
    }
}
&lt;/script&gt;

&lt;style lang=&quot;scss&quot; scoped&gt;
.scrollbar-demo-item {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 50px;
    margin: 10px;
    text-align: center;
    border-radius: 4px;
    background: #ecf5ff;
    color: #409eff;
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Manual Scrolling</h3>
        <p>Use the scrollTo method to manually control the scrollbar's position.</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-scrollbar ref=&quot;scrollbar&quot; height=&quot;300px&quot; @scroll=&quot;handleScroll&quot;&gt;
        &lt;div ref=&quot;list&quot;&gt;
            @for(let i = 0; i &lt; 30; i++) {
                &lt;p class=&quot;scrollbar-demo-item&quot;&gt;
                    @i
                &lt;/p&gt;
            }
        &lt;/div&gt;
    &lt;/jk-scrollbar&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider max=&quot;@model.max&quot; value=&quot;@model.scrollTop&quot; formatTooltip=&quot;@formatTooltip&quot; @input=&quot;handleSliderInput&quot;
        /&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        scrollTop: 0,
        max: 0
    };

    mounted() {
        this.model.max = this.$getRef(&quot;list&quot;)!.output.clientHeight - 300;
    }

    handleScroll(e: VNode.Event&lt;any&gt;) {
        this.model.scrollTop = e.data.top;
    }

    handleSliderInput(e: VNode.Event) {
        this.$getRef(&quot;scrollbar&quot;)?.component.scrollTo({
            top: e.data
        });
    }

    formatTooltip(val: number) {
        return val + &quot;px&quot;;
    }
}
&lt;/script&gt;

&lt;style scoped&gt;
.scrollbar-demo-item {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 50px;
    margin: 10px;
    text-align: center;
    border-radius: 4px;
    background: #ecf5ff;
    color: #409eff;
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Pull-to-Refresh</h3>
        <p>
            Configure the
            <code>pullRefresh</code>
            property to set up pull-to-refresh functionality.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div style=&quot;height:200px&quot;&gt;
        &lt;jk-scrollbar
            pulldown=&quot;@({
                enable: true,
                load: pulldownLoad
            })&quot;&gt;
            @for(let i = 0; i &lt; 20; i++) {
                &lt;p class=&quot;scrollbar-demo-item&quot;&gt;
                    @i
                &lt;/p&gt;
            }
        &lt;/jk-scrollbar&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { sleep } from &quot;@joker.front/shared&quot;;
import { Toast } from &quot;../../../packages/toast&quot;;

export default class extends Component {
    async pulldownLoad() {
        await sleep(2000);

        Toast(&quot;加载成功&quot;);
    }
}
&lt;/script&gt;
&lt;style lang=&quot;scss&quot; scoped&gt;
.scrollbar-demo-item {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 50px;
    margin: 10px;
    text-align: center;
    border-radius: 4px;
    background: #ecf5ff;
    color: #409eff;
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <p>Custom pull-down display</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo6)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div style=&quot;height:200px&quot;&gt;
        &lt;jk-scrollbar
            pulldown=&quot;@({
                enable: true,
                load: pulldownLoad
            })&quot;&gt;
            @section(&quot;pulldown&quot;, y, loading) {
                @if(loading) {
                    &lt;i class=&quot;jk-icon-loading&quot; /&gt;
                    抓紧加载中
                }
                else {
                    下拉距离为：@y
                }
            }
            @for(let i = 0; i &lt; 20; i++) {
                &lt;p class=&quot;scrollbar-demo-item&quot;&gt;
                    @i
                &lt;/p&gt;
            }
        &lt;/jk-scrollbar&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { sleep } from &quot;@joker.front/shared&quot;;
import { Toast } from &quot;../../../packages/toast&quot;;

export default class extends Component {
    async pulldownLoad() {
        await sleep(2000);

        Toast(&quot;加载成功&quot;);
    }
}
&lt;/script&gt;
&lt;style lang=&quot;scss&quot; scoped&gt;
.scrollbar-demo-item {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 50px;
    margin: 10px;
    text-align: center;
    border-radius: 4px;
    background: #ecf5ff;
    color: #409eff;
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <p>
            <strong>pulldown</strong>
            parameters are as follows:
        </p>
        <pre><code class="language-ts"> {
    enable: boolean; // Enable pull-down functionality  
    class: any; // Custom styles  
    height: number; // Set pull-down container height, default is 40  
    text: string; // Default text: &quot;Pull down to refresh...&quot;  
    loosingText: string; // Default text: &quot;Release to refresh...&quot;  
    loadingText: string; // Default text: &quot;Loading...&quot;  
    load?: () =&gt; any; // Loading method supports async  
 }
</code></pre>
        <h3>Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Options</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>native</td>
                    <td>Whether to use native interaction</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>wrapClass</td>
                    <td>Additional styles for the wrap element</td>
                    <td>string</td>
                    <td>—</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>viewClass</td>
                    <td>Additional styles for the view element</td>
                    <td>string</td>
                    <td>—</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>class</td>
                    <td>Additional root-level styles</td>
                    <td>string</td>
                    <td>—</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>noresize</td>
                    <td>
                        Do not respond to container size changes. Optimizes performance if container size remains static
                    </td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>tag</td>
                    <td>HTML tag for the output element</td>
                    <td>string</td>
                    <td>—</td>
                    <td>div</td>
                </tr>
                <tr>
                    <td>height</td>
                    <td>Custom height, defaults to parent container value if not set</td>
                    <td>string</td>
                    <td>—</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>width</td>
                    <td>Custom width, defaults to parent container value if not set</td>
                    <td>string</td>
                    <td>—</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>max-height</td>
                    <td>Custom maximum height, defaults to parent container value if not set</td>
                    <td>string</td>
                    <td>—</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>max-width</td>
                    <td>Custom maximum width, defaults to parent container value if not set</td>
                    <td>string</td>
                    <td>—</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>pulldown</td>
                    <td>Pull-down configuration (for details, refer to the above pulldown parameters)</td>
                    <td>object</td>
                    <td>—</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <h3>Sections</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Section Name</th>
                    <th>Description</th>
                    <th>Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>default</td>
                    <td>Default content</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>pulldown</td>
                    <td>Custom pull-down section</td>
                    <td>Pull distance (max equals container height), whether loading</td>
                </tr>
            </tbody>
        </table>
        <h3>Methods</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Method Name</th>
                    <th>Description</th>
                    <th>Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>scrollTo</td>
                    <td>Scroll to a position</td>
                    <td>
                        Refer to
                        <code>ScrollToOptions</code>
                    </td>
                </tr>
                <tr>
                    <td>scrollToEl</td>
                    <td>Scroll to the position of a specified element</td>
                    <td>HTMLElement</td>
                </tr>
                <tr>
                    <td>update</td>
                    <td>Recalculate scrollbar (use when internal elements are added/removed)</td>
                    <td>callBack Executes after calculation</td>
                </tr>
            </tbody>
        </table>
        <h3>Events</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Event Name</th>
                    <th>Description</th>
                    <th>Callback Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>scroll</td>
                    <td>Triggered when scroll position changes</td>
                    <td>
                        {top:number,left:number,x:number,y:number,isUserScroll?:boolean}, where x and y represent scroll direction progress
                    </td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo6 from "../../components/scrollbar/demo6.joker";
import DEMO_JOKER_demo5 from "../../components/scrollbar/demo5.joker";
import DEMO_JOKER_demo4 from "../../components/scrollbar/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/scrollbar/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/scrollbar/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/scrollbar/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo6,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>