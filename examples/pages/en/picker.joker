<template>
    <div ref="container" class="joker-demo-container">
        <h2>Picker</h2>
        <p>
            Provides multiple option sets for users to select from, supports single-column and multi-column cascading selection. Typically used in combination with popup layer components.
        </p>
        <h3>Basic Usage</h3>
        <p>
            The Picker component configures option data through the
            <code>columns</code>
            property, where
            <code>columns</code>
            is an array containing strings or objects.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-picker
        title=&quot;选择地区&quot;
        columns=&quot;@(['杭州', '宁波', '温州', '绍兴', '湖州', '嘉兴', '金华'])&quot;
        @confirm=&quot;handleConfirm&quot;
        @cancel=&quot;handleCancel&quot;
        @change=&quot;handleChange&quot;
    /&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { Toast } from &quot;../../../packages/toast&quot;;

export default class extends Component {
    handleConfirm(e: VNode.Event&lt;string[]&gt;) {
        Toast(`confirm:${e.data.join(&quot;-&quot;)}`);
    }
    handleCancel(e: VNode.Event&lt;string[]&gt;) {
        Toast(`cancel:${e.data.join(&quot;-&quot;)}`);
    }
    handleChange(e: VNode.Event&lt;string[]&gt;) {
        Toast(`change:${e.data.join(&quot;-&quot;)}`);
    }
}
&lt;/script&gt;


</code></pre>
        </DemoContainer>
        <h3>Default Selection</h3>
        <p>
            Configure the
            <code>value</code>
            property to set the default selected item.
            <strong>Note</strong>
            : For non-cascading selections, the
            <code>value</code>
            should be passed as an array.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-picker
        title=&quot;选择地区&quot;
        columns=&quot;@(['杭州', '宁波', '温州', '绍兴', '湖州', '嘉兴', '金华'])&quot;
        value=&quot;绍兴&quot;
        @confirm=&quot;handleConfirm&quot;
        @cancel=&quot;handleCancel&quot;
        @change=&quot;handleChange&quot;
    /&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { Toast } from &quot;../../../packages/toast&quot;;

export default class extends Component {
    handleConfirm(e: VNode.Event&lt;string[]&gt;) {
        Toast(`confirm:${e.data.join(&quot;-&quot;)}`);
    }
    handleCancel(e: VNode.Event&lt;string[]&gt;) {
        Toast(`cancel:${e.data.join(&quot;-&quot;)}`);
    }
    handleChange(e: VNode.Event&lt;string[]&gt;) {
        Toast(`change:${e.data.join(&quot;-&quot;)}`);
    }
}
&lt;/script&gt;


</code></pre>
        </DemoContainer>
        <h3>Multi-Column (Non-Cascading)</h3>
        <p>Display multiple columns by passing an array of multiple items.</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-picker
        title=&quot;选择时间&quot;
        columns=&quot;@([
            ['周一', '周二', '周三', '周四', '周五', '周六', '周日'],
            ['上午', '中午', '晚上']
        ])&quot;
        value=&quot;@(['周三', '晚上'])&quot;
        @confirm=&quot;handleConfirm&quot;
        @cancel=&quot;handleCancel&quot;
        @change=&quot;handleChange&quot;
    /&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { Toast } from &quot;../../../packages/toast&quot;;

export default class extends Component {
    handleConfirm(e: VNode.Event&lt;string[]&gt;) {
        Toast(`confirm:${e.data.join(&quot;-&quot;)}`);
    }
    handleCancel(e: VNode.Event&lt;string[]&gt;) {
        Toast(`cancel:${e.data.join(&quot;-&quot;)}`);
    }
    handleChange(e: VNode.Event&lt;string[]&gt;) {
        Toast(`change:${e.data.join(&quot;-&quot;)}`);
    }
}
&lt;/script&gt;


</code></pre>
        </DemoContainer>
        <h3>Cascading Selection</h3>
        <p>
            Link data by specifying
            <code>children</code>
            .
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-picker
        title=&quot;选择地区&quot;
        columns=&quot;@([
            {
                label: '山东',
                value: '山东',
                children: [
                    { label: '济南', value: '济南' },
                    { label: '青岛', value: '青岛' },
                    { label: '烟台', value: '烟台' },
                    { label: '潍坊', value: '潍坊' },
                    { label: '淄博', value: '淄博' }
                ]
            },
            {
                label: '浙江',
                value: '浙江',
                children: [
                    { label: '杭州', value: '杭州' },
                    { label: '宁波', value: '宁波' },
                    { label: '温州', value: '温州' },
                    { label: '绍兴', value: '绍兴' },
                    { label: '嘉兴', value: '嘉兴' }
                ]
            }
        ])&quot;
        value=&quot;@(['山东', '烟台'])&quot;
        @confirm=&quot;handleConfirm&quot;
        @cancel=&quot;handleCancel&quot;
        @change=&quot;handleChange&quot;
    /&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { Toast } from &quot;../../../packages/toast&quot;;

export default class extends Component {
    handleConfirm(e: VNode.Event&lt;string[]&gt;) {
        Toast(`confirm:${e.data.join(&quot;-&quot;)}`);
    }
    handleCancel(e: VNode.Event&lt;string[]&gt;) {
        Toast(`cancel:${e.data.join(&quot;-&quot;)}`);
    }
    handleChange(e: VNode.Event&lt;string[]&gt;) {
        Toast(`change:${e.data.join(&quot;-&quot;)}`);
    }
}
&lt;/script&gt;


</code></pre>
        </DemoContainer>
        <h3>Loading State</h3>
        <p>
            Enable the loading state by configuring the
            <code>loading</code>
            property.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-picker
        title=&quot;选择地区&quot;
        columns=&quot;@([
            {
                label: '山东',
                value: 'sd',
                children: [
                    { label: '济南', value: 'sd-jn' },
                    { label: '青岛', value: 'sd-qd' },
                    { label: '烟台', value: 'sd-yt' },
                    { label: '潍坊', value: 'sd-wf' },
                    { label: '淄博', value: 'sd-zb' }
                ]
            },
            {
                label: '浙江',
                value: 'zj',
                children: [
                    { label: '杭州', value: 'zj-hz' },
                    { label: '宁波', value: 'zj-nb' },
                    { label: '温州', value: 'zj-wz' },
                    { label: '绍兴', value: 'zj-sx' },
                    { label: '嘉兴', value: 'zj-jx' }
                ]
            }
        ])&quot;
        value=&quot;@(['sd', 'sd-yt'])&quot;
        loading=&quot;@true&quot;
        @confirm=&quot;handleConfirm&quot;
        @cancel=&quot;handleCancel&quot;
        @change=&quot;handleChange&quot;
    /&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { Toast } from &quot;../../../packages/toast&quot;;

export default class extends Component {
    handleConfirm(e: VNode.Event&lt;string[]&gt;) {
        Toast(`confirm:${e.data.join(&quot;-&quot;)}`);
    }
    handleCancel(e: VNode.Event&lt;string[]&gt;) {
        Toast(`cancel:${e.data.join(&quot;-&quot;)}`);
    }
    handleChange(e: VNode.Event&lt;string[]&gt;) {
        Toast(`change:${e.data.join(&quot;-&quot;)}`);
    }
}
&lt;/script&gt;


</code></pre>
        </DemoContainer>
        <h3>Custom Data</h3>
        <p>
            Customize data fields using
            <code>labelKey</code>
            ,
            <code>valueKey</code>
            , and
            <code>childrenKey</code>
            .
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo6)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-picker
        title=&quot;选择地区&quot;
        columns=&quot;@([
            {
                regionName: '山东',
                regionCode: '山东',
                cities: [
                    { regionName: '济南', regionCode: '济南' },
                    { regionName: '青岛', regionCode: '青岛' },
                    { regionName: '烟台', regionCode: '烟台' },
                    { regionName: '潍坊', regionCode: '潍坊' },
                    { regionName: '淄博', regionCode: '淄博' }
                ]
            },
            {
                regionName: '浙江',
                regionCode: '浙江',
                cities: [
                    { regionName: '杭州', regionCode: '杭州' },
                    { regionName: '宁波', regionCode: '宁波' },
                    { regionName: '温州', regionCode: '温州' },
                    { regionName: '绍兴', regionCode: '绍兴' },
                    { regionName: '嘉兴', regionCode: '嘉兴' }
                ]
            }
        ])&quot;
        labelKey=&quot;regionName&quot;
        valueKey=&quot;regionCode&quot;
        childrenKey=&quot;cities&quot;
        value=&quot;@(['山东', '烟台'])&quot;
        @confirm=&quot;handleConfirm&quot;
        @cancel=&quot;handleCancel&quot;
        @change=&quot;handleChange&quot;
    /&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { Toast } from &quot;../../../packages/toast&quot;;

export default class extends Component {
    handleConfirm(e: VNode.Event&lt;string[]&gt;) {
        Toast(`confirm:${e.data.join(&quot;-&quot;)}`);
    }
    handleCancel(e: VNode.Event&lt;string[]&gt;) {
        Toast(`cancel:${e.data.join(&quot;-&quot;)}`);
    }
    handleChange(e: VNode.Event&lt;string[]&gt;) {
        Toast(`change:${e.data.join(&quot;-&quot;)}`);
    }
}
&lt;/script&gt;


</code></pre>
        </DemoContainer>
        <h3>Used with Popup Layer</h3>
        <DemoContainer component="@(components.DEMO_JOKER_demo7)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-button type=&quot;primary&quot; fullWidth @click=&quot;handleClick&quot;&gt;Click Me&lt;/jk-button&gt;
    &lt;jk-drawer ref=&quot;drawer&quot; direction=&quot;bottom&quot; showHeader=&quot;@false&quot; size=&quot;auto&quot;&gt;
        &lt;jk-picker
            title=&quot;选择地区&quot;
            columns=&quot;@([
                {
                    regionName: '山东',
                    regionCode: '山东',
                    cities: [
                        { regionName: '济南', regionCode: '济南' },
                        { regionName: '青岛', regionCode: '青岛' },
                        { regionName: '烟台', regionCode: '烟台' },
                        { regionName: '潍坊', regionCode: '潍坊' },
                        { regionName: '淄博', regionCode: '淄博' }
                    ]
                },
                {
                    regionName: '浙江',
                    regionCode: '浙江',
                    cities: [
                        { regionName: '杭州', regionCode: '杭州' },
                        { regionName: '宁波', regionCode: '宁波' },
                        { regionName: '温州', regionCode: '温州' },
                        { regionName: '绍兴', regionCode: '绍兴' },
                        { regionName: '嘉兴', regionCode: '嘉兴' }
                    ]
                }
            ])&quot;
            labelKey=&quot;regionName&quot;
            valueKey=&quot;regionCode&quot;
            childrenKey=&quot;cities&quot;
            value=&quot;@(['山东', '烟台'])&quot;
            @confirm=&quot;handleConfirm&quot;
            @cancel=&quot;handleCancel&quot;
            @change=&quot;handleChange&quot;
        /&gt;
    &lt;/jk-drawer&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { Toast } from &quot;../../../packages/toast&quot;;

export default class extends Component {
    handleClick() {
        this.$getRef(&quot;drawer&quot;)?.component.open();
    }
    handleConfirm(e: VNode.Event&lt;string[]&gt;) {
        Toast(`confirm:${e.data.join(&quot;-&quot;)}`);
        this.$getRef(&quot;drawer&quot;)?.component.close();
    }
    handleCancel(e: VNode.Event&lt;string[]&gt;) {
        Toast(`cancel:${e.data.join(&quot;-&quot;)}`);
        this.$getRef(&quot;drawer&quot;)?.component.close();
    }
    handleChange(e: VNode.Event&lt;string[]&gt;) {
        Toast(`change:${e.data.join(&quot;-&quot;)}`);
    }
}
&lt;/script&gt;


</code></pre>
        </DemoContainer>
        <h3>Empty Panel</h3>
        <p>
            Configure the
            <code>empty-text</code>
            property to set the display content for an empty panel.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo8)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-picker
        title=&quot;选择地区&quot;
        columns=&quot;@([])&quot;
        labelKey=&quot;regionName&quot;
        valueKey=&quot;regionCode&quot;
        childrenKey=&quot;cities&quot;
        value=&quot;@(['山东', '烟台'])&quot;
        @confirm=&quot;handleConfirm&quot;
        @cancel=&quot;handleCancel&quot;
        @change=&quot;handleChange&quot;
    /&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { Toast } from &quot;../../../packages/toast&quot;;

export default class extends Component {
    handleConfirm(e: VNode.Event&lt;string[]&gt;) {
        Toast(`confirm:${e.data.join(&quot;-&quot;)}`);
        this.$getRef(&quot;drawer&quot;)?.component.close();
    }
    handleCancel(e: VNode.Event&lt;string[]&gt;) {
        Toast(`cancel:${e.data.join(&quot;-&quot;)}`);
        this.$getRef(&quot;drawer&quot;)?.component.close();
    }
    handleChange(e: VNode.Event&lt;string[]&gt;) {
        Toast(`change:${e.data.join(&quot;-&quot;)}`);
    }
}
&lt;/script&gt;


</code></pre>
        </DemoContainer>
        <h3>Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Options</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>title</td>
                    <td>The title text of the picker</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>cancelText</td>
                    <td>Text for the cancel button, defaults to &quot;Cancel&quot;</td>
                    <td>string</td>
                    <td>—</td>
                    <td>'Cancel'</td>
                </tr>
                <tr>
                    <td>confirmText</td>
                    <td>Text for the confirm button, defaults to &quot;Confirm&quot;</td>
                    <td>string</td>
                    <td>—</td>
                    <td>'Confirm'</td>
                </tr>
                <tr>
                    <td>columns</td>
                    <td>
                        Option data collection: a one-dimensional array for single-column, a two-dimensional array for multi-column. Cascading options can be linked via
                        <code>children</code>
                        .
                    </td>
                    <td>Array&lt;any&gt;</td>
                    <td>—</td>
                    <td>[]</td>
                </tr>
                <tr>
                    <td>value</td>
                    <td>
                        Bound value: a single value (string/number) for single selection, or an array for multi-column selection.
                    </td>
                    <td>any / any[]</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>loading</td>
                    <td>Whether to display the loading state</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>loadingText</td>
                    <td>Text displayed during loading state</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>labelKey</td>
                    <td>Custom field name for displaying the option object, defaults to &quot;label&quot;</td>
                    <td>string</td>
                    <td>—</td>
                    <td>'label'</td>
                </tr>
                <tr>
                    <td>valueKey</td>
                    <td>Custom field name for the value of the option object, defaults to &quot;value&quot;</td>
                    <td>string</td>
                    <td>—</td>
                    <td>'value'</td>
                </tr>
                <tr>
                    <td>childrenKey</td>
                    <td>
                        For cascading selection, custom field name for the child options array, defaults to &quot;children&quot;
                    </td>
                    <td>string</td>
                    <td>—</td>
                    <td>'children'</td>
                </tr>
                <tr>
                    <td>empty-text</td>
                    <td>Text displayed for the empty panel</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
            </tbody>
        </table>
        <h3>Events</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Event</th>
                    <th>Description</th>
                    <th>Callback Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>change</td>
                    <td>Triggered when an option changes.</td>
                    <td>
                        <code>
                            {index: number (changed column index), value: any[] (latest complete value set)}
                        </code>
                    </td>
                </tr>
                <tr>
                    <td>confirm</td>
                    <td>Triggered when the confirm button is clicked.</td>
                    <td>
                        Current selected value(s) (single value for single selection, array for multiple selections), detailed info of selected item(s).
                    </td>
                </tr>
                <tr>
                    <td>cancel</td>
                    <td>Triggered when the cancel button is clicked.</td>
                    <td>
                        Current selected value(s) (single value for single selection, array for multiple selections), detailed info of selected item(s).
                    </td>
                </tr>
            </tbody>
        </table>
        <h3>Section</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>empty</td>
                    <td>List when no options exist</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo8 from "../../components/picker/demo8.joker";
import DEMO_JOKER_demo7 from "../../components/picker/demo7.joker";
import DEMO_JOKER_demo6 from "../../components/picker/demo6.joker";
import DEMO_JOKER_demo5 from "../../components/picker/demo5.joker";
import DEMO_JOKER_demo4 from "../../components/picker/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/picker/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/picker/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/picker/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo8,
        DEMO_JOKER_demo7,
        DEMO_JOKER_demo6,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>