<template>
    <div ref="container" class="joker-demo-container">
        <h2>Tabs</h2>
        <p>Separate content collections that are related but belong to different categories.</p>
        <h3>Basic Usage</h3>
        <p>Basic and concise tabs.</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-tabs&gt;
        &lt;jk-tab-panel label=&quot;Home&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Home&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Issues&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Issues&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Repository&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Repository&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
    &lt;/jk-tabs&gt;
&lt;/template&gt;

&lt;style&gt;
.demo-content {
    font-size: 24px;
    font-weight: bold;
    padding: 20px 10px;
    color: var(--jk-color-text-secondary);
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Default Display</h3>
        <p>
            Set the default active tab via the
            <code>value</code>
            property.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-tabs value=&quot;Issues&quot;&gt;
        &lt;jk-tab-panel label=&quot;Home&quot; name=&quot;Home&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Home&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Issues&quot; name=&quot;Issues&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Issues&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Repository&quot; name=&quot;Repository&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Repository&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Settings&quot; name=&quot;Settings&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Settings&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
    &lt;/jk-tabs&gt;
&lt;/template&gt;

&lt;style&gt;
.demo-content {
    font-size: 24px;
    font-weight: bold;
    padding: 20px 10px;
    color: var(--jk-color-text-secondary);
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Custom Tab Title</h3>
        <p>
            Use the
            <strong>label</strong>
            slot in
            <code>jk-tab-panel</code>
            to customize tab headers.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-tabs&gt;
        &lt;jk-tab-panel&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Shoot&lt;/div&gt;
            @section(&quot;label&quot;) {
                &lt;i class=&quot;jk-icon-s-camera&quot; /&gt;
                Shoot
            }
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Issues&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Issues&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Repository Activity&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Repository Activity&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Settings&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Settings&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
    &lt;/jk-tabs&gt;
&lt;/template&gt;

&lt;style&gt;
.demo-content {
    font-size: 24px;
    font-weight: bold;
    padding: 20px 10px;
    color: var(--jk-color-text-secondary);
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Card Style</h3>
        <p>
            Enable card-style tabs by configuring the
            <code>card</code>
            property.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-tabs card&gt;
        &lt;jk-tab-panel label=&quot;Home&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Home&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Issues&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Issues&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Repository Activity&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Repository Activity&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Settings&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Settings&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
    &lt;/jk-tabs&gt;
&lt;/template&gt;

&lt;style&gt;
.demo-content {
    font-size: 24px;
    font-weight: bold;
    padding: 20px 10px;
    color: var(--jk-color-text-secondary);
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Scrollable Title Bar</h3>
        <p>
            When the number of tabs exceeds the
            <code>swipeThreshold</code>
            , the title bar becomes scrollable.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-tabs&gt;
        &lt;jk-tab-panel label=&quot;用户管理&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;
                展示系统内所有用户的信息，包括用户名、角色、创建时间等，支持搜索、筛选和编辑操作。
            &lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;权限配置&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;
                管理不同角色的权限分配，可设置菜单访问权限、操作权限等，支持批量配置和权限继承。
            &lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;数据统计&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;
                展示平台运行的关键数据指标，如用户活跃度、业务成交量、系统访问量等，以图表形式直观呈现。
            &lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;日志记录&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;
                记录用户的所有操作行为，包括登录日志、操作日志、异常日志等，支持按时间、用户、操作类型筛选。
            &lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;系统设置&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;配置系统基础参数，如时区、语言、缓存策略等，支持系统备份和恢复功能。&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;模块管理&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;管理系统内的功能模块，支持模块的启用、禁用和排序，可自定义模块名称和图标。&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;消息通知&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;设置系统消息的推送规则，包括邮件、短信、站内信等渠道，支持消息模板自定义。&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;接口文档&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;
                展示系统提供的API接口详情，包括请求参数、返回格式、调用示例等，支持在线调试。
            &lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;数据字典&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;维护系统内的基础数据字典，如性别、学历、状态等枚举值，支持字典项的增删改查。&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;任务调度&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;
                管理系统定时任务，可配置任务执行时间、频率和执行脚本，支持任务状态监控和手动触发。
            &lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;缓存管理&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;
                查看和管理系统缓存数据，支持缓存的清除、刷新和预热操作，显示缓存命中率等指标。
            &lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;安全中心&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;
                展示系统安全状态，包括登录异常检测、漏洞扫描结果等，提供密码策略和安全设置选项。
            &lt;/div&gt;
        &lt;/jk-tab-panel&gt;
    &lt;/jk-tabs&gt;
&lt;/template&gt;

&lt;style&gt;
.demo-content {
    font-size: 24px;
    font-weight: bold;
    padding: 20px 10px;
    color: var(--jk-color-text-secondary);
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Shrink Layout</h3>
        <p>
            Enable the shrink layout with the
            <code>shrink</code>
            property.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo6)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-tabs shrink&gt;
        &lt;jk-tab-panel label=&quot;Home&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Home&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Issues&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Issues&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Repository Activity&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Repository Activity&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Settings&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Settings&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
    &lt;/jk-tabs&gt;
&lt;/template&gt;

&lt;style&gt;
.demo-content {
    font-size: 24px;
    font-weight: bold;
    padding: 20px 10px;
    color: var(--jk-color-text-secondary);
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Click Event</h3>
        <DemoContainer component="@(components.DEMO_JOKER_demo7)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-tabs @change=&quot;handleChange&quot;&gt;
        &lt;jk-tab-panel label=&quot;Home&quot; name=&quot;Home&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Home&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Issues&quot; name=&quot;Issues&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Issues&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Repository&quot; name=&quot;Repository&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Repository&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Settings&quot; name=&quot;Settings&quot;&gt;
            &lt;div class=&quot;demo-content&quot;&gt;Settings&lt;/div&gt;
        &lt;/jk-tab-panel&gt;
    &lt;/jk-tabs&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { Toast } from &quot;../../../packages/toast&quot;;

export default class extends Component {
    handleChange(e: VNode.Event&lt;any&gt;) {
        Toast(e.data.name);
        //其他数据
        //Toast(e.data.component.props.label)
    }
}
&lt;/script&gt;
&lt;style&gt;
.demo-content {
    font-size: 24px;
    font-weight: bold;
    padding: 20px 10px;
    color: var(--jk-color-text-secondary);
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Sticky Layout</h3>
        <p>
            Enable sticky layout with the
            <code>sticky</code>
            property. When scrolling to the top, sticky tabs automatically affix to the viewport.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo8)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-tabs sticky&gt;
        &lt;jk-tab-panel label=&quot;Home&quot;&gt;
            @for(let i = 0; i &lt; 2; i++) {
                &lt;div class=&quot;demo-content&quot;&gt;Home&lt;/div&gt;
            }
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Issues&quot;&gt;
            @for(let i = 0; i &lt; 2; i++) {
                &lt;div class=&quot;demo-content&quot;&gt;Issues&lt;/div&gt;
            }
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Repository&quot;&gt;
            @for(let i = 0; i &lt; 2; i++) {
                &lt;div class=&quot;demo-content&quot;&gt;Repository&lt;/div&gt;
            }
        &lt;/jk-tab-panel&gt;
        &lt;jk-tab-panel label=&quot;Settings&quot;&gt;
            @for(let i = 0; i &lt; 2; i++) {
                &lt;div class=&quot;demo-content&quot;&gt;Settings&lt;/div&gt;
            }
        &lt;/jk-tab-panel&gt;
    &lt;/jk-tabs&gt;
&lt;/template&gt;

&lt;style scoped&gt;
.demo-content {
    font-size: 24px;
    height: 300px;
    font-weight: bold;
    padding: 20px 10px;
    text-align: center;
    line-height: 300px;
    color: var(--jk-color-text-secondary);
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Transition Animation</h3>
        <p>
            Enable transition animation with the
            <code>animated</code>
            property.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo9)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;jk-tabs animated full-height&gt;
            &lt;jk-tab-panel label=&quot;Home&quot;&gt;
                &lt;div class=&quot;demo-content red&quot;&gt;Home&lt;/div&gt;
            &lt;/jk-tab-panel&gt;
            &lt;jk-tab-panel label=&quot;Issues&quot;&gt;
                &lt;div class=&quot;demo-content blue&quot;&gt;Issues&lt;/div&gt;
            &lt;/jk-tab-panel&gt;
            &lt;jk-tab-panel label=&quot;Repository&quot;&gt;
                &lt;div class=&quot;demo-content red&quot;&gt;Repository&lt;/div&gt;
            &lt;/jk-tab-panel&gt;
            &lt;jk-tab-panel label=&quot;Settings&quot;&gt;
                &lt;div class=&quot;demo-content blue&quot;&gt;Settings&lt;/div&gt;
            &lt;/jk-tab-panel&gt;
        &lt;/jk-tabs&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped lang=&quot;scss&quot;&gt;
.container {
    height: 400px;
    .demo-content {
        font-size: 24px;
        height: 300px;
        font-weight: bold;
        padding: 20px 10px;
        text-align: center;
        line-height: 300px;
        color: #fff;

        &amp;.red {
            background: red;
        }

        &amp;.blue {
            background: blue;
        }
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Dynamic Add/Remove</h3>
        <DemoContainer component="@(components.DEMO_JOKER_demo10)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;container&quot;&gt;
        @if(model.tabs &gt; 0) {
            &lt;jk-tabs animated value=&quot;@model.selectName&quot;&gt;
                @for(let i = 0; i &lt; model.tabs; i++) {
                    &lt;jk-tab-panel label=&quot;Home@(i)&quot; name=&quot;@i&quot;&gt;
                        &lt;div class=&quot;demo-content&quot;&gt;
                            Home@(i)
                        &lt;/div&gt;
                    &lt;/jk-tab-panel&gt;
                }
            &lt;/jk-tabs&gt;
        }
    &lt;/div&gt;
    &lt;jk-button-group fullWidth&gt;
        &lt;jk-button type=&quot;danger&quot; @click=&quot;handleRemove&quot;&gt;Remove&lt;/jk-button&gt;
        &lt;jk-button type=&quot;primary&quot; @click=&quot;handleAdd&quot;&gt;Add&lt;/jk-button&gt;
    &lt;/jk-button-group&gt;
&lt;/template&gt;

&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        tabs: 2,
        selectName: 0
    };
    handleRemove() {
        if (this.model.tabs &lt; 0) return;
        this.model.tabs = this.model.tabs - 1;
    }

    handleAdd() {
        this.model.tabs = this.model.tabs + 1;

        this.$nextUpdatedRender(() =&gt; {
            this.model.selectName = this.model.tabs - 1;
        });
    }
}
&lt;/script&gt;

&lt;style scoped lang=&quot;scss&quot;&gt;
.container {
    height: 500px;
    background: #fff;
}
.demo-content {
    font-size: 24px;
    height: 300px;
    font-weight: bold;
    padding: 20px 10px;
    text-align: center;
    line-height: 300px;
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Options</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>value</td>
                    <td>
                        Default active tab value (corresponds to
                        <code>name</code>
                        in
                        <code>tab-panel</code>
                        )
                    </td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>card</td>
                    <td>Card theme</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>shrink</td>
                    <td>Whether to enable shrink layout</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>class</td>
                    <td>Custom class name</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>swipeThreshold</td>
                    <td>Threshold for enabling title bar scrolling</td>
                    <td>number</td>
                    <td>—</td>
                    <td>5</td>
                </tr>
                <tr>
                    <td>sticky</td>
                    <td>Whether to enable sticky layout (auto affix when scrolling to top)</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>animated</td>
                    <td>Whether to enable transition animation</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>full-height</td>
                    <td>Is flex layout used to achieve 100% height</td>
                    <td>boolean</td>
                    <td>-</td>
                    <td>false</td>
                </tr>
            </tbody>
        </table>
        <h3>Events</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Event Name</th>
                    <th>Description</th>
                    <th>Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>change</td>
                    <td>Triggered when active tab changes</td>
                    <td>Tab item info</td>
                </tr>
                <tr>
                    <td>click</td>
                    <td>Triggered when tab is clicked</td>
                    <td>Tab item info</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo9 from "../../components/tabs/demo9.joker";
import DEMO_JOKER_demo8 from "../../components/tabs/demo8.joker";
import DEMO_JOKER_demo7 from "../../components/tabs/demo7.joker";
import DEMO_JOKER_demo6 from "../../components/tabs/demo6.joker";
import DEMO_JOKER_demo5 from "../../components/tabs/demo5.joker";
import DEMO_JOKER_demo4 from "../../components/tabs/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/tabs/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/tabs/demo2.joker";
import DEMO_JOKER_demo10 from "../../components/tabs/demo10.joker";
import DEMO_JOKER_demo1 from "../../components/tabs/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo9,
        DEMO_JOKER_demo8,
        DEMO_JOKER_demo7,
        DEMO_JOKER_demo6,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo10,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>