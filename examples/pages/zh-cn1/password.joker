<template>
    <div ref="container" class="joker-demo-container">
        <h2>Password 密码</h2>
        <p>密码输入框</p>
        <h3>基础用法</h3>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-field&gt;
        &lt;jk-password value=&quot;123321&quot; placeholder=&quot;Please enter your password&quot; /&gt;
    &lt;/jk-field&gt;
&lt;/template&gt;

</code></pre>
        </DemoContainer>
        <h3>带 icon 的输入框</h3>
        <p>带有图标标记输入类型</p>
        <p>
            可以通过
            <code>prefix-icon</code>
            属性在 password 组件首部增加显示图标。
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-field&gt;
        &lt;jk-password placeholder=&quot;Please enter content&quot; prefix-icon=&quot;jk-icon-lock&quot; /&gt;
    &lt;/jk-field&gt;
&lt;/template&gt;

</code></pre>
        </DemoContainer>
        <h3>尺寸</h3>
        <p>
            可通过
            <code>size</code>
            属性指定输入框的尺寸，除了默认的大小外，还提供了 medium、small 和 mini 三种尺寸。
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-field label=&quot;Large&quot;&gt;
        &lt;jk-password placeholder=&quot;Please enter&quot; size=&quot;large&quot; showSwitchBtn /&gt;
    &lt;/jk-field&gt;
    &lt;jk-field label=&quot;Default&quot;&gt;
        &lt;jk-password placeholder=&quot;Please enter&quot; showSwitchBtn /&gt;
    &lt;/jk-field&gt;
    &lt;jk-field label=&quot;Small&quot;&gt;
        &lt;jk-password placeholder=&quot;Please enter&quot; size=&quot;small&quot; showSwitchBtn /&gt;
    &lt;/jk-field&gt;
    &lt;jk-field label=&quot;mini&quot;&gt;
        &lt;jk-password placeholder=&quot;Please enter&quot; size=&quot;mini&quot; showSwitchBtn /&gt;
    &lt;/jk-field&gt;
&lt;/template&gt;

</code></pre>
        </DemoContainer>
        <h3>输入长度限制</h3>
        <p>
            <code>maxlength</code>
            和
            <code>minlength</code>
            是原生属性，用来限制输入框的字符长度。
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-field&gt;
        &lt;jk-password placeholder=&quot;Please enter&quot; maxlength=&quot;6&quot; minlength=&quot;6&quot; align=&quot;right&quot; /&gt;
    &lt;/jk-field&gt;
&lt;/template&gt;
</code></pre>
        </DemoContainer>
        <h3>Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>参数</th>
                    <th>说明</th>
                    <th>类型</th>
                    <th>可选值</th>
                    <th>默认值</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>value</td>
                    <td>绑定值</td>
                    <td>string / number</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>class</td>
                    <td>自定义 class 样式</td>
                    <td>string</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>name</td>
                    <td>原生属性</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>size</td>
                    <td>输入框尺寸</td>
                    <td>string</td>
                    <td>large / small / mini</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>maxlength</td>
                    <td>原生属性，最大输入长度</td>
                    <td>number</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>minlength</td>
                    <td>原生属性，最小输入长度</td>
                    <td>number</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>placeholder</td>
                    <td>输入框占位文本</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>prefix-icon</td>
                    <td>输入框头部图标</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>autofocus</td>
                    <td>原生属性，自动获取焦点</td>
                    <td>boolean</td>
                    <td>true, false</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>tabindex</td>
                    <td>输入框的 tabindex</td>
                    <td>string</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>show-switch-btn</td>
                    <td>显示切换按钮</td>
                    <td>boolean</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo4 from "../../components/password/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/password/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/password/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/password/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>