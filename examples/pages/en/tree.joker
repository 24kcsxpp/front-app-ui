<template>
    <div ref="container" class="joker-demo-container">
        <h2>Tree Control</h2>
        <p>Displays information in a clear hierarchical structure that can be expanded or collapsed.</p>
        <h3>Basic Usage</h3>
        <p>Demonstrates basic tree structure display.</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-cell&gt;
        &lt;jk-tree data=&quot;@treeData&quot; @current-change=&quot;handleCurrentChange&quot; /&gt;
    &lt;/jk-cell&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { TreeNode } from &quot;../../../packages/tree/store/node&quot;;

export default class extends Component {
    treeData = [
        {
            label: &quot;Level 1 - 1&quot;,
            children: [
                {
                    label: &quot;Level 2 - 1-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 1-1-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 2&quot;,
            children: [
                {
                    label: &quot;Level 2 - 2-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 2-1-1&quot;
                        }
                    ]
                },
                {
                    label: &quot;Level 2 - 2-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 2-2-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 3&quot;,
            children: [
                {
                    label: &quot;Level 2 - 3-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 3-1-1&quot;
                        }
                    ]
                },
                {
                    label: &quot;Level 2 - 3-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 3-2-1&quot;
                        }
                    ]
                }
            ]
        }
    ];

    handleCurrentChange(e: VNode.Event&lt;TreeNode&gt;) {
        console.log(e.data.label);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Selectable</h3>
        <p>Suitable for scenarios requiring hierarchical selection. This demo also showcases dynamic loading.</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-cell&gt;
        &lt;jk-tree lazy load=&quot;@loadData&quot; nodeKey=&quot;id&quot; @check=&quot;handleCheck&quot; show-checkbox default-expand-all /&gt;
    &lt;/jk-cell&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { TreeNode } from &quot;../../../packages/tree/store/node&quot;;
import { sleep } from &quot;@joker.front/shared&quot;;

export default class extends Component {
    model = {};
    async loadData(node: TreeNode, callBack: Function) {
        if (node.level === 0) {
            return callBack([
                { label: &quot;Option 1&quot;, id: &quot;1&quot; },
                { label: &quot;Option 2&quot;, id: &quot;2&quot; }
            ]);
        }

        // Simulate a request
        await sleep(1000);

        if (node.level &gt; 3) {
            return callBack();
        }

        if (node.key === &quot;1&quot;) {
            callBack([
                { label: &quot;Option 1-1&quot;, id: &quot;1-1&quot; },
                { label: &quot;Option 2-2&quot;, id: &quot;2-2&quot;, isVirtualNode: true }
            ]);
        } else if (node.key === &quot;2-2&quot;) {
            callBack([
                { label: &quot;Option 2-2-1&quot;, id: &quot;2-2-1&quot; },
                { label: &quot;Option 2-2-2&quot;, id: &quot;2-2-2&quot; }
            ]);
        } else {
            callBack();
        }
    }

    handleCheck(e: VNode.Event&lt;TreeNode&gt;) {
        console.log(e.data, e.data.checked);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Node Disabling and Selection</h3>
        <p>
            Nodes can be disabled by setting the
            <code>disabled</code>
            property, which is typically used in conjunction with
            <code>show-checkbox</code>
            .
        </p>
        <p>
            This example also demonstrates how to retrieve and set selected nodes. If you wish to get/set nodes by
            <strong>key</strong>
            , it is recommended to configure the corresponding
            <code>node-key</code>
            .
        </p>
        <blockquote>
            <p>
                If
                <code>node-key</code>
                is not configured or its value is undefined, an internal id will be automatically generated as the key.
            </p>
        </blockquote>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-cell&gt;
        &lt;jk-tree
            ref=&quot;tree&quot;
            data=&quot;@treeData&quot;
            node-key=&quot;id&quot;
            show-checkbox
            default-expanded-keys=&quot;@(['2', '2-1', '3'])&quot;
            default-checked-keys=&quot;@(['1-1-1', '2-2-1'])&quot;
        /&gt;
    &lt;/jk-cell&gt;
    &lt;jk-cell&gt;
        &lt;jk-button @click=&quot;getCheckNodes&quot;&gt;Get selected nodes&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;getCheckKeys&quot;&gt;Get selected keys&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;setCheckedByKeys&quot;&gt;Set selected by keys&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;checkedAll&quot;&gt;Select all&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;clear&quot;&gt;Clear selection&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;selectLeafNode&quot;&gt;Select Leaf Node&lt;/jk-button&gt;
    &lt;/jk-cell&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { Message, MessageBox } from &quot;../../../src&quot;;

export default class extends Component {
    treeData = [
        {
            id: &quot;1&quot;,
            label: &quot;Level 1 - 1&quot;,
            children: [
                {
                    id: &quot;1-1&quot;,
                    label: &quot;Level 2 - 1-1&quot;,
                    children: [
                        {
                            id: &quot;1-1-1&quot;,
                            label: &quot;Level 3 - 1-1-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            id: &quot;2&quot;,
            label: &quot;Level 1 - 2&quot;,
            children: [
                {
                    id: &quot;2-1&quot;,
                    label: &quot;Level 2 - 2-1&quot;,
                    children: [
                        {
                            id: &quot;2-1-1&quot;,
                            label: &quot;Level 3 - 2-1-1&quot;
                        }
                    ]
                },
                {
                    id: &quot;2-2&quot;,
                    label: &quot;Level 2 - 2-2&quot;,
                    disabled: true,
                    children: [
                        {
                            id: &quot;2-2-1&quot;,
                            label: &quot;Level 3 - 2-2-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            id: &quot;3&quot;,
            label: &quot;Level 1 - 3&quot;,
            children: [
                {
                    id: &quot;3-1&quot;,
                    label: &quot;Level 2 - 3-1&quot;,
                    children: [
                        {
                            id: &quot;3-1-1&quot;,
                            label: &quot;Level 3 - 3-1-1&quot;
                        }
                    ]
                },
                {
                    id: &quot;3-2&quot;,
                    label: &quot;Level 2 - 3-2&quot;,
                    children: [
                        {
                            id: &quot;3-2-1&quot;,
                            label: &quot;Level 3 - 3-2-2&quot;
                        },
                        {
                            id: &quot;3-2-2&quot;,
                            label: &quot;Level 3 - 3-2-1&quot;,
                            disabled: true
                        }
                    ]
                }
            ]
        }
    ];

    get tree() {
        return this.$getRef(&quot;tree&quot;)?.component;
    }

    getCheckNodes() {
        Message({
            message: &quot;Please check the console output&quot;,
            type: &quot;success&quot;
        });

        console.log(this.tree?.getCheckedNodes());
    }

    getCheckKeys() {
        MessageBox.alert(this.tree?.getCheckedKeys().join(&quot;,&quot;));
    }

    setCheckedByKeys() {
        this.tree?.setCheckedKeys([&quot;2-1-1&quot;, &quot;3-1&quot;]);
    }

    checkedAll() {
        this.tree?.checkedAll();
    }

    clear() {
        this.tree?.clearChecked();
    }
    selectLeafNode() {
        this.tree?.setCurrentNode(&quot;3-2-2&quot;);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Custom Node Template</h3>
        <p>
            The
            <code>section</code>
            component can be used to implement custom node template displays.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-cell&gt;
        &lt;jk-tree ref=&quot;tree&quot; data=&quot;@treeData&quot; icon-class=&quot;jk-icon-arrow-right&quot; default-expand-all show-checkbox&gt;
            @section(&quot;default&quot;, node) {
                &lt;div class=&quot;node-item&quot;&gt;
                    &lt;div class=&quot;label&quot;&gt;
                        &lt;span class=&quot;icon @getNodeIcon(node)&quot;&gt;&lt;/span&gt;@node.label
                    &lt;/div&gt;
                    &lt;div class=&quot;option&quot;&gt;
                        &lt;jk-link type=&quot;primary&quot; @click.stop=&quot;appendNode(node)&quot;&gt;Add&lt;/jk-link&gt;
                        &lt;jk-link type=&quot;danger&quot; @click.stop=&quot;removeNode(node)&quot;&gt;Delete&lt;/jk-link&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            }
        &lt;/jk-tree&gt;
    &lt;/jk-cell&gt;
    &lt;jk-button @click=&quot;handleClick&quot;&gt;Reset&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { TreeNode } from &quot;../../../packages/tree/store/node&quot;;

export default class extends Component {
    treeData = [
        {
            label: &quot;Level 1 - 1&quot;,
            children: [
                {
                    label: &quot;Level 2 - 1-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 1-1-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 2&quot;,
            children: [
                {
                    label: &quot;Level 2 - 2-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 2-1-1&quot;
                        }
                    ]
                },
                {
                    label: &quot;Level 2 - 2-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 2-2-1&quot;
                        },
                        {
                            label: &quot;Level 3 - 2-2-2&quot;
                        },
                        {
                            label: &quot;Level 3 - 2-2-3&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 3&quot;,
            children: [
                {
                    label: &quot;Level 2 - 3-1&quot;
                },
                {
                    label: &quot;Level 2 - 3-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 3-2-1&quot;
                        }
                    ]
                }
            ]
        }
    ];

    getNodeIcon(node: TreeNode) {
        if (node.level === 1) {
            return &quot;jk-icon-food&quot;;
        } else if (node.level === 2) {
            return &quot;jk-icon-cpu&quot;;
        } else {
            return &quot;jk-icon-connection&quot;;
        }
    }

    appendNode(e: VNode.Event, node: TreeNode) {
        let child = node.insterChild({
            label: &quot;Test adding node &quot; + (node.level + 1)
        });

        // Since it is dynamically added, for the checkbox, you need to set the checkbox once to refresh the tree.
        // This line of code is only for the demo to run.
        // Generally, there will not be a dynamic tree with checkboxes.
        child.setChecked(false);
    }

    removeNode(e: VNode.Event, node: TreeNode) {
        node.remove();
    }

    handleClick() {
        this.$getRef(&quot;tree&quot;).component.reload();
    }
}
&lt;/script&gt;

&lt;style lang=&quot;scss&quot; scoped&gt;
.node-item {
    display: flex;
    flex: 1;

    font-size: 14px;
    .label {
        flex: 1;
        overflow: hidden;
    }

    .icon {
        margin-right: 8px;
    }

    .option {
        :deep(.jk-link) {
            margin-right: 10px;
        }
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Node Filtering</h3>
        <p>
            Filter nodes by keywords by calling the
            <code>filter</code>
            method of the Tree instance, passing the keyword as a parameter. Note that in this case, you need to set
            <code>filter-method</code>
            , whose value is the filtering function. By default, this method performs string filtering based on the node's label.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-cell&gt;
        &lt;jk-input placeholder=&quot;Please enter keywords&quot; @input=&quot;handleInput&quot; @change=&quot;handleInput&quot; /&gt;
    &lt;/jk-cell&gt;
    &lt;jk-cell&gt;
        &lt;jk-tree data=&quot;@treeData&quot; ref=&quot;tree&quot; default-expand-all /&gt;
    &lt;/jk-cell&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    treeData = [
        {
            label: &quot;Level 1 - 1&quot;,
            children: [
                {
                    label: &quot;Level 2 - 1-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 1-1-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 2&quot;,
            children: [
                {
                    label: &quot;Level 2 - 2-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 2-1-1&quot;
                        }
                    ]
                },
                {
                    label: &quot;Level 2 - 2-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 2-2-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 3&quot;,
            children: [
                {
                    label: &quot;Level 2 - 3-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 3-1-1&quot;
                        }
                    ]
                },
                {
                    label: &quot;Level 2 - 3-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 3-2-1&quot;
                        }
                    ]
                }
            ]
        }
    ];
    handleInput(e: VNode.Event&lt;string&gt;) {
        this.$getRef(&quot;tree&quot;)?.component.filter(e.data);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Non-associative Mode</h3>
        <p>
            Enable the
            <code>check-strictly</code>
            property to activate non-associative mode. When checkboxes are displayed, this ensures strict adherence to parent-child disassociation.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo7)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-tree data=&quot;@treeData&quot; ref=&quot;tree&quot; default-expand-all checkStrictly show-checkbox /&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    treeData = [
        {
            label: &quot;Level 1 - 1&quot;,
            children: [
                {
                    label: &quot;Level 2 - 1-1&quot;,
                    disabled: true,
                    children: [
                        {
                            label: &quot;Level 3 - 1-1-1&quot;
                        },
                        {
                            label: &quot;Level 3 - 1-1-2&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 2&quot;,
            children: [
                {
                    label: &quot;Level 2 - 2-1&quot;,
                    disabled: true,
                    children: [
                        {
                            label: &quot;Level 3 - 2-1-1&quot;
                        }
                    ]
                },
                {
                    label: &quot;Level 2 - 2-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 2-2-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 3&quot;,
            children: [
                {
                    label: &quot;Level 2 - 3-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 3-1-1&quot;
                        }
                    ]
                },
                {
                    label: &quot;Level 2 - 3-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 3-2-1&quot;
                        }
                    ]
                }
            ]
        }
    ];
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Attribute</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Accepted Values</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>data</td>
                    <td>Data to display</td>
                    <td>array</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>class</td>
                    <td>Custom class style</td>
                    <td>string</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>empty-text</td>
                    <td>Text displayed when content is empty</td>
                    <td>String</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>empty-size</td>
                    <td>Empty panel size</td>
                    <td>String</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>node-key</td>
                    <td>Unique identifier for each tree node; should be unique across the entire tree</td>
                    <td>String</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>load</td>
                    <td>
                        Method for loading subtree data; only takes effect when the
                        <code>lazy</code>
                        property is true
                    </td>
                    <td>function(node, resolve)</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>default-expand-all</td>
                    <td>Whether to expand all nodes by default</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>expand-on-click-node</td>
                    <td>
                        Whether to expand or collapse a node when clicking it. Default is
                        <code>true</code>
                        . If
                        <code>false</code>
                        , nodes only expand/collapse when clicking the arrow icon.
                    </td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>check-on-click-node</td>
                    <td>
                        Whether to select a node when clicking it. Default is
                        <code>false</code>
                        , meaning nodes are only selected when clicking the checkbox.
                    </td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>default-expanded-keys</td>
                    <td>Array of keys for nodes expanded by default</td>
                    <td>array</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>show-checkbox</td>
                    <td>Whether nodes are selectable</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>default-checked-keys</td>
                    <td>Array of keys for nodes checked by default</td>
                    <td>array</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>current-node-key</td>
                    <td>Currently selected node</td>
                    <td>string, number</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>filter-method</td>
                    <td>
                        Filter function executed when filtering tree nodes. Returns
                        <code>true</code>
                        to display the node or
                        <code>false</code>
                        to hide it.
                    </td>
                    <td>Function(node,value)</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>indent</td>
                    <td>Horizontal indentation between adjacent nodes in pixels</td>
                    <td>number</td>
                    <td>—</td>
                    <td>16</td>
                </tr>
                <tr>
                    <td>icon-class</td>
                    <td>Custom icon for tree nodes</td>
                    <td>string</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>lazy</td>
                    <td>
                        Whether to lazily load child nodes; must be used with the
                        <code>load</code>
                        method
                    </td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>labelKey</td>
                    <td>Specifies the node label as an attribute of the node object</td>
                    <td>string</td>
                    <td>—</td>
                    <td>label</td>
                </tr>
                <tr>
                    <td>childrenKey</td>
                    <td>Specifies the subtree as an attribute of the node object</td>
                    <td>string</td>
                    <td>—</td>
                    <td>children</td>
                </tr>
                <tr>
                    <td>disabledKey</td>
                    <td>Specifies whether the node's checkbox is disabled as an attribute of the node object</td>
                    <td>string</td>
                    <td>—</td>
                    <td>disabled</td>
                </tr>
                <tr>
                    <td>expandKey</td>
                    <td>Specifies whether a node is expanded by default as an attribute of the node object</td>
                    <td>string</td>
                    <td>—</td>
                    <td>expand</td>
                </tr>
                <tr>
                    <td>isLeafKey</td>
                    <td>
                        Specifies whether a node is a leaf node; only takes effect when
                        <code>lazy</code>
                        is specified
                    </td>
                    <td>string</td>
                    <td>—</td>
                    <td>isLeaf</td>
                </tr>
                <tr>
                    <td>virtualKey</td>
                    <td>
                        Advanced usage: whether the node is virtual. Virtual nodes are not included in the checkbox selection process. Mainly effective when selection is enabled.
                    </td>
                    <td>string</td>
                    <td>—</td>
                    <td>isVirtualNode</td>
                </tr>
                <tr>
                    <td>check-strictly</td>
                    <td>Whether to strictly adhere to parent-child disassociation when checkboxes are displayed</td>
                    <td>boolean</td>
                    <td>-</td>
                    <td>false</td>
                </tr>
            </tbody>
        </table>
        <h3>Methods</h3>
        <p>
            The
            <code>Tree</code>
            internally uses objects of type
            <code>Node</code>
            to wrap user-provided data and maintain node states.
            <br />
            The
            <code>Tree</code>
            provides the following methods:
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Method</th>
                    <th>Description</th>
                    <th>Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>filter</td>
                    <td>Filters tree nodes</td>
                    <td></td>
                </tr>
                <tr>
                    <td>getCheckedNodes</td>
                    <td>
                        If nodes are selectable (i.e.,
                        <code>show-checkbox</code>
                        is
                        <code>true</code>
                        ), returns an array of currently selected nodes
                    </td>
                    <td>
                        (leafOnly, includeHalfChecked) Accepts two boolean parameters: 1) Whether to include only leaf nodes (default:
                        <code>false</code>
                        ), 2) Whether to include half-selected nodes (default:
                        <code>false</code>
                        )
                    </td>
                </tr>
                <tr>
                    <td>getCheckedKeys</td>
                    <td>
                        If nodes are selectable (i.e.,
                        <code>show-checkbox</code>
                        is
                        <code>true</code>
                        ), returns an array of keys of currently selected nodes
                    </td>
                    <td>
                        (leafOnly, includeHalfChecked) Accepts two boolean parameters: 1) Whether to include only leaf nodes (default:
                        <code>false</code>
                        ), 2) Whether to include half-selected nodes (default:
                        <code>false</code>
                        )
                    </td>
                </tr>
                <tr>
                    <td>setCheckedKeys</td>
                    <td>
                        Sets currently checked nodes by keys. Requires
                        <code>node-key</code>
                        to be configured.
                    </td>
                    <td>
                        (keys, leafOnly) Accepts two parameters: 1) Array of keys for checked nodes, 2) Boolean indicating whether to set only leaf nodes as checked (default:
                        <code>false</code>
                        )
                    </td>
                </tr>
                <tr>
                    <td>checkNode</td>
                    <td>Sets the checked state of a node</td>
                    <td>
                        Two parameters: 1) Key or
                        <code>TreeNode</code>
                        of the node to be checked, 2) Boolean indicating whether the node is checked
                    </td>
                </tr>
                <tr>
                    <td>getCurrentNode</td>
                    <td>Gets the currently selected node</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>setCurrentNode</td>
                    <td>Sets the current selected state of a node</td>
                    <td>
                        Accepts a
                        <code>TreeNode</code>
                        or node key. Pass
                        <code>undefined</code>
                        to deselect.
                    </td>
                </tr>
                <tr>
                    <td>getNodeByKey</td>
                    <td>Gets a node by its key</td>
                    <td>key</td>
                </tr>
                <tr>
                    <td>removeNode</td>
                    <td>Deletes a node from the Tree</td>
                    <td>
                        Accepts a
                        <code>TreeNode</code>
                        or node key
                    </td>
                </tr>
                <tr>
                    <td>appendNode</td>
                    <td>
                        Adds a new node to the root by passing node data. To add under a specific node, first retrieve that node and use its
                        <code>insertChild</code>
                        method.
                    </td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>checkedAll</td>
                    <td>Checks all nodes</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>clearChecked</td>
                    <td>Unchecks all nodes</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>collapseNode</td>
                    <td>Collapses a node</td>
                    <td>
                        Accepts the target
                        <code>TreeNode</code>
                    </td>
                </tr>
                <tr>
                    <td>expandNode</td>
                    <td>Expands a node</td>
                    <td>
                        Accepts the target
                        <code>TreeNode</code>
                    </td>
                </tr>
                <tr>
                    <td>getAllNodeData</td>
                    <td>
                        Retrieves all node data with hierarchy represented by
                        <code>children</code>
                    </td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>getNode</td>
                    <td>Gets a specific node based on conditions</td>
                    <td>(node: TreeNode) =&gt; boolean/void</td>
                </tr>
                <tr>
                    <td>reload</td>
                    <td>Re-renders the tree</td>
                    <td></td>
                </tr>
            </tbody>
        </table>
        <h3>Events</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Event Name</th>
                    <th>Description</th>
                    <th>Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>node-contextmenu</td>
                    <td>Triggered when a node is right-clicked</td>
                    <td>
                        <code>TreeNode</code>
                        of the clicked node
                    </td>
                </tr>
                <tr>
                    <td>check</td>
                    <td>Triggered when a checkbox is clicked</td>
                    <td>
                        <code>TreeNode</code>
                        ; use the
                        <code>checked</code>
                        property to check state
                    </td>
                </tr>
                <tr>
                    <td>current-change</td>
                    <td>Triggered when the currently selected node changes</td>
                    <td>
                        <code>TreeNode</code>
                        of the new selection
                    </td>
                </tr>
                <tr>
                    <td>node-expand</td>
                    <td>Triggered when a node is expanded</td>
                    <td>
                        <code>TreeNode</code>
                        of the expanded node
                    </td>
                </tr>
                <tr>
                    <td>node-collapse</td>
                    <td>Triggered when a node is collapsed</td>
                    <td>
                        <code>TreeNode</code>
                        of the collapsed node
                    </td>
                </tr>
            </tbody>
        </table>
        <h3>Scoped Slots</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>name</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>—</td>
                    <td>
                        Custom content for tree nodes; parameter is
                        <code>TreeNode</code>
                    </td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo7 from "../../components/tree/demo7.joker";
import DEMO_JOKER_demo5 from "../../components/tree/demo5.joker";
import DEMO_JOKER_demo4 from "../../components/tree/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/tree/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/tree/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/tree/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo7,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>