<template>
    <div class="jk-color-hue-slider" ref="container">
        <div class="bar" ref="bar" @click.self="barClick"></div>
        <div class="thumb" ref="thumb" style="top:@(model.thumbTop+'px')"></div>
    </div>
</template>
<script>
import { VNode } from "@joker.front/core";
import { Color } from "@joker.front/shared";
import { TouchBase } from "../utils/touch";
export default class extends TouchBase<{ color: Color }> {
    model = {
        thumbTop: 0
    };
    getThumbTop() {
        let thumb = this.$getRef<VNode.Element>("thumb")?.output;
        let hue = this.props.color?.h!;

        return Math.round((hue * (this.container.offsetHeight - thumb.offsetHeight / 2)) / 360);
    }
    container: any;
    mounted() {
        this.container = this.$getRef<VNode.Element>("container")?.output;
        this.$watch(
            () => this.props.color?.value,
            () => {
                this.model.thumbTop = this.getThumbTop();
            }
        );
        this.model.thumbTop = this.getThumbTop();

        this.bindTouchEvent(this.container);
    }
    onTouchStart(e: Event) {
        e.preventDefault();
        let rect = this.container.getBoundingClientRect();
        let top = this.touchData.startY - rect.top;
        this.handleDrag(top);
    }
    onTouchMove(e: Event) {
        e.preventDefault();
        let rect = this.container.getBoundingClientRect();
        let top = this.touchData.startY - rect.top + this.touchData.deltaY;
        this.handleDrag(top);
    }

    barClick(e: VNode.Event) {
        let rect = this.container.getBoundingClientRect();

        let top = e.event.clientY - rect.top;
        this.handleDrag(top);
    }

    handleDrag(top: number) {
        let thumb = this.$getRef<VNode.Element>("thumb")?.output;

        let rect = this.container.getBoundingClientRect();

        top = Math.min(top, rect.height - thumb.offsetHeight / 2);
        top = Math.max(thumb.offsetHeight / 2, top);

        let hue = Math.round(((top - thumb.offsetHeight / 2) / (rect.height - thumb.offsetHeight)) * 360);

        this.props.color?.setVal("h", hue);
    }
}
</script>

<style lang="scss" scoped>
.jk-color-hue-slider {
    position: relative;
    box-sizing: border-box;
    width: 12px;
    height: 180px;
    background: #f00;
    padding: 2px 0px;

    .bar {
        position: relative;
        background: linear-gradient(to bottom, #f00 0%, #ff0 17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);
        height: 100%;
    }

    .thumb {
        position: absolute;
        cursor: pointer;
        box-sizing: border-box;
        left: 0;
        top: 0;
        width: 100%;
        height: 4px;
        border-radius: 1px;
        background: var(--jk-background-color-default);
        border: solid 1px #f0f0f0;
        box-shadow: 0 0 2px rgba(0, 0, 0, 0.6);
        z-index: 1;
    }
}
</style>