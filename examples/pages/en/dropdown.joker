<template>
    <div ref="container" class="joker-demo-container">
        <h2>Dropdown Menu</h2>
        <p>Display a dropdown menu by clicking or hovering.</p>
        <h3>Basic Usage</h3>
        <p>
            Use the
            <code>Section</code>
            component to set the trigger element for displaying the dropdown menu.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-dropdown&gt;
            &lt;a href=&quot;javascript:void(0)&quot;&gt;
                Trigger by click
                &lt;i class=&quot;jk-icon-arrow-down&quot; /&gt;
                &lt;jk-dropdown-menu&gt;
                    &lt;jk-dropdown-item&gt;Menu 1&lt;/jk-dropdown-item&gt;
                    &lt;jk-dropdown-item&gt;Menu 2&lt;/jk-dropdown-item&gt;
                    &lt;jk-dropdown-item&gt;Menu 3&lt;/jk-dropdown-item&gt;
                &lt;/jk-dropdown-menu&gt;
            &lt;/a&gt;
        &lt;/jk-dropdown&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
</code></pre>
        </DemoContainer>
        <h3>Split Button Style</h3>
        <p>
            Configure the
            <code>split-button</code>
            property to present the trigger element as a button group.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-dropdown split-button @click=&quot;handleClick&quot;&gt;
            Trigger by click
            &lt;jk-dropdown-menu&gt;
                &lt;jk-dropdown-item&gt;Menu 1&lt;/jk-dropdown-item&gt;
                &lt;jk-dropdown-item&gt;Menu 2&lt;/jk-dropdown-item&gt;
                &lt;jk-dropdown-item&gt;Menu 3&lt;/jk-dropdown-item&gt;
            &lt;/jk-dropdown-menu&gt;
        &lt;/jk-dropdown&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;

&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { MessageBox } from &quot;../../../src&quot;;

export default class extends Component {
    handleClick() {
        MessageBox.alert(&quot;You clicked the button&quot;);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Menu Styling</h3>
        <p>Rich menu options can be displayed by configuring properties such as icons and dividers for menu items.</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-dropdown split-button&gt;
        More Menus
        &lt;jk-dropdown-menu&gt;
            &lt;jk-dropdown-item icon=&quot;jk-icon-circle-plus-outline&quot;&gt;Create a new project&lt;/jk-dropdown-item&gt;
            &lt;jk-dropdown-item icon=&quot;jk-icon-remove-outline&quot;&gt;Delete&lt;/jk-dropdown-item&gt;
            &lt;jk-dropdown-item disabled icon=&quot;jk-icon-edit&quot;&gt;Edit&lt;/jk-dropdown-item&gt;
            &lt;jk-dropdown-item divided&gt;&lt;/jk-dropdown-item&gt;
            &lt;jk-dropdown-item icon=&quot;jk-icon-share&quot;&gt;Share the project&lt;/jk-dropdown-item&gt;
            &lt;jk-dropdown-item icon=&quot;jk-icon-document-copy&quot;&gt;Copy the project&lt;/jk-dropdown-item&gt;
        &lt;/jk-dropdown-menu&gt;
    &lt;/jk-dropdown&gt;
&lt;/template&gt;
</code></pre>
        </DemoContainer>
        <p>
            Of course, you can also choose not to populate the dropdown menu with
            <code>jk-dropdown-item</code>
            components and instead use a custom approach.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-dropdown split-button&gt;
        Customize
        &lt;jk-dropdown-menu ref=&quot;menu&quot;&gt;
            &lt;div class=&quot;demo-menu&quot;&gt;
                &lt;div class=&quot;header&quot;&gt;List&lt;/div&gt;
                &lt;div class=&quot;content&quot;&gt;
                    &lt;ul&gt;
                        &lt;li&gt;
                            &lt;jk-checkbox label=&quot;A&quot;&gt;Delete A&lt;/jk-checkbox&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;jk-checkbox label=&quot;B&quot;&gt;Delete B&lt;/jk-checkbox&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;jk-checkbox label=&quot;C&quot;&gt;Delete C&lt;/jk-checkbox&gt;
                        &lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/div&gt;
                &lt;div class=&quot;foot&quot; @click=&quot;close&quot;&gt;
                    &lt;i class=&quot;jk-icon-circle-plus&quot;&gt;&lt;/i&gt;
                    Create a new project
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/jk-dropdown-menu&gt;
    &lt;/jk-dropdown&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    close() {
        this.$getRef(&quot;menu&quot;)?.component.close();
    }
}
&lt;/script&gt;

&lt;style scoped lang=&quot;scss&quot;&gt;
.demo-menu {
    width: 200px;
    .header {
        line-height: 25px;
        padding: 0 10px;
        border-bottom: solid 1px #efefef;
    }
    .content {
        padding: 10px;
        ul {
            margin: 0;
            padding: 0;
            list-style: none;

            li {
                list-style: none;
                margin-bottom: 10px;
            }
        }
    }

    .foot {
        border-top: solid 1px #efefef;
        padding: 5px 10px;
        cursor: pointer;
        i {
            margin-right: 5px;
        }

        &amp;:hover {
            background-color: var(--jk-background-color-base);
        }
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Disabled</h3>
        <p>
            Enable disable state by setting the
            <code>disabled</code>
            property. This automatically handles button state changes in
            <code>split-button</code>
            mode. For non-split-button mode, please manage disable styles for content manually.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-dropdown split-button disabled&gt;
        More Menus
        &lt;jk-dropdown-menu&gt;
            &lt;jk-dropdown-item icon=&quot;jk-icon-circle-plus-outline&quot;&gt;Create a New Project&lt;/jk-dropdown-item&gt;
            &lt;jk-dropdown-item icon=&quot;jk-icon-remove-outline&quot;&gt;Delete&lt;/jk-dropdown-item&gt;
            &lt;jk-dropdown-item disabled icon=&quot;jk-icon-edit&quot;&gt;Edit&lt;/jk-dropdown-item&gt;
            &lt;jk-dropdown-item divided&gt;&lt;/jk-dropdown-item&gt;
            &lt;jk-dropdown-item icon=&quot;jk-icon-share&quot;&gt;Share the Project&lt;/jk-dropdown-item&gt;
            &lt;jk-dropdown-item icon=&quot;jk-icon-document-copy&quot;&gt;Copy the Project&lt;/jk-dropdown-item&gt;
        &lt;/jk-dropdown-menu&gt;
    &lt;/jk-dropdown&gt;
&lt;/template&gt;
</code></pre>
        </DemoContainer>
        <h3>Dropdown Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Options</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>type</td>
                    <td>
                        Menu button type, same as Button component (only effective when
                        <code>split-button</code>
                        is true)
                    </td>
                    <td>string</td>
                    <td>—</td>
                    <td>primary</td>
                </tr>
                <tr>
                    <td>size</td>
                    <td>
                        Also applies to trigger button when
                        <code>split-button</code>
                        is true
                    </td>
                    <td>string</td>
                    <td>large / small / mini</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>split-button</td>
                    <td>Whether to present trigger element as button group</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>disabled</td>
                    <td>Whether menu is disabled</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
            </tbody>
        </table>
        <h3>Dropdown Events</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Event Name</th>
                    <th>Description</th>
                    <th>Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>click</td>
                    <td>
                        Callback when left button is clicked in
                        <code>split-button</code>
                        mode. For non-
                        <code>split-button</code>
                        , handles click event bubbling.
                    </td>
                    <td>—</td>
                </tr>
            </tbody>
        </table>
        <h3>Dropdown Menu Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Options</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>placement</td>
                    <td>Menu position</td>
                    <td>string</td>
                    <td>
                        top/top-start/top-end/bottom/bottom-start/bottom-end/left/left-start/left-end/right/right-start/right-end
                    </td>
                    <td>bottom-start</td>
                </tr>
                <tr>
                    <td>maxHeight</td>
                    <td>Maximum height</td>
                    <td>string</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <h3>Dropdown Menu Item Attributes</h3>
        <p>| Parameter | Description       | Type    | Options | Default | |----------</p>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo5 from "../../components/dropdown/demo5.joker";
import DEMO_JOKER_demo4 from "../../components/dropdown/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/dropdown/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/dropdown/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/dropdown/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>